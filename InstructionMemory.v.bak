module InstructionMemory #(parameter W=8,D=64)(address,RD);
input [4*W-1:0] address;
output reg [4*W-1:0] RD;
//default 64 byte asynchronous instruction memory
//default width:8 bit depth:64 
//Byte addressable memory
//Normally ARM has 32 bit address space however since I created memory as 64 depth, 6 bit is enough to reach all
//addresses 2^6=64. Therefore I will use least significand 6 bit of 32 bit address input
reg [W-1:0] inst_memory [0:D-1];
initial begin
	$readmemh("inst_memory.txt",inst_memory);
end
//4 bit memory address
reg [5:0] memory_address;
//Since memory is byte addressable and instruction is 32 bit read 4 byte consecutively in single cycle
//Ready signals for consecutive read operations
reg ready0=0,ready1=0,ready2=0,ready3=0;
always @ (*) begin	
	//Address of first byte
	memory_address=address[5:0];
	ready0=1;
	//Read first byte update memory_address and set ready signal
	if(ready0==1) begin
		RD[W-1:0]=inst_memory[memory_address];
		memory_address=memory_address+6'd1;
		ready1=1;
	end
	//Read second byte update memory_address and set ready signal
	if(ready1==1) begin
		RD[2*W-1:W]=inst_memory[memory_address];
		memory_address=memory_address+6'd1;
		ready2=1;
	end
	//Read third byte update memory_address and set ready signal
	if(ready2==1) begin
		RD[3*W-1:2*W]=inst_memory[memory_address];
		memory_address=memory_address+6'd1;
		ready3=1;
	end
	//Read fourth byte and clear all ready signals for next read operation
	if(ready3==1) begin
		RD[4*W-1:3*W]=inst_memory[memory_address];
		ready0=0;
		ready1=0;
		ready2=0;
		ready3=0;
	end
end

endmodule