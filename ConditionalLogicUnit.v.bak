module ConditionalLogicUnit(FlagW,RegW,MemW,Flags_in,Cond,ALUFlags,RegWrite,MemWrite,PCSrc,Flags_out);
input RegW,MemW;
input [1:0] FlagW;
//ALUFlags which is coming from ALU
input [3:0] ALUFlags;
//Current NZCV values
input [3:0] Flags_in;
//New flags after operation is executed
output reg [3:0] Flags_out=4'd0;
//Condition
input [3:0] Cond;
output reg RegWrite=0,MemWrite=0,PCSrc=0;
//Set if condition satisfied clear otherwise
reg CondEx=0;
reg [1:0] FlagWrite=2'b00;
always @ (*) begin
	case(Cond)
		//Equal
		4'b0000: CondEx=Flags_in[2];//Z
		//Not equal
		4'b0001: CondEx=~Flags_in[2];//Z'
		//Unsigned higher or same
		4'b0010: CondEx=Flags_in[1];//C
		//Unsigned lower
		4'b0011: CondEx=~Flags_in[1];//C'
		//Negative
		4'b0100: CondEx=Flags_in[3];//N
		//Positive or zero
		4'b0101: CondEx=~Flags_in[3];//N'
		//Overflow
		4'b0110: CondEx=Flags_in[0];//V
		//No overflow
		4'b0111: CondEx=~Flags_in[0];//V'
		//Unsigned higher
		4'b1000: CondEx=~Flags_in[2]&Flags_in[1];//Z'C
		//Unsigned lower or same
		4'b1001: CondEx=Flags_in[2]|~Flags_in[1];//Z or C'
		//Signed greater than or equal
		4'b1010: CondEx=~(Flags_in[3]^Flags_in[0]);// complement of N XOR V
		//Signed less than
		4'b1011: CondEx=Flags_in[3]^Flags_in[0];//N XOR V
		//Signed greater than
		4'b1100: CondEx=(~Flags_in[2])&(~(Flags_in[3]^Flags_in[0]));//Z'(N XOR V)'
		//Signed less than or equal
		4'b1101: CondEx=Flags_in[2]|(Flags_in[3]^Flags_in[0]);//Z or (N XOR V)
		//Always
		4'b1110: CondEx=1;
	endcase
	PCSrc=0;
	//Assign control signals according to CondEx 
	MemWrite=CondEx&MemW;
	RegWrite=RegW&CondEx;
	FlagWrite[1]=FlagW[1]&CondEx;
	FlagWrite[0]=FlagW[0]&CondEx;
	//Update NZCV flags according to FlagWrite
	//If FlagWrite is set update flags otherwise save its content
	if(FlagWrite[1])
		Flags_out[3:2]=ALUFlags[3:2];
	else
		Flags_out[3:2]=Flags_in[3:2];
	if(FlagWrite[0])
		Flags_out[1:0]=ALUFlags[1:0];
	else
		Flags_out[1:0]=Flags_in[1:0];
end

endmodule
	
		
		

